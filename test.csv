status,problem_solution,failed_testcase_index,failed_output,stderr,return_code
PASSED,"
main :: IO ()
main = interact solve

solve :: String -> String
solve s =
  let ws = words s
      n = read (head ws) :: Int
      cs = take n (tail ws)
      dmin = if n < 2 then 7 else minimum [ hamming a b | (i,a) <- zip [0..] cs, b <- drop (i+1) cs ]
      k = if n < 2 then 6 else (dmin - 1) `div` 2
  in show k

hamming :: String -> String -> Int
hamming a b = length (filter id (zipWith (/=) a b))
",-1,,,0
PASSED,"
import Control.Monad (replicateM)

main :: IO ()
main = do
  n <- readLn :: IO Int
  codes <- replicateM n getLine
  let k = if n == 1 then 6 else
            let minD = minimum [hamming a b | (i,a) <- zip [0..] codes, (j,b) <- zip [0..] codes, i < j]
            in (minD - 1) `div` 2
  putStrLn (show k)

hamming :: String -> String -> Int
hamming a b = sum [1 | (x,y) <- zip a b, x /= y]
",-1,,,0
